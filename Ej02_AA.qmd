---
title: "Ejemplo 2: Mapeo del contenido de Zinc"
format: html
---

## Datos
Este conjunto de datos proporciona la ubicación espacial de valores de concentraciones de metales pesados (cadmium, copper, lead, zinc), la elevación del terreno, el contenido de materia orgánica, tipo de suelo, frecuencia de inundación e un periodo de 10 años y distancia entre el punto muestreado y el rio Meuse. Los datos fueron recolectados mediante muestras compuestas de un área de 15 m x 15 m.

Se ilustra el uso del método kriging ordinarios y del algoritmo RFSI, en un escenario donde se utiliza solo la información de la variable medida, sin incluir las covariables disponibles. 


### Lectura base de datos

```{r}
#| code-fold: true
#| code-summary: "Carga paquetes y funciones"
library(sp)
library(geoR)
library(sf)
library(caret)
library(randomForest)
library(tmap)
library(gstat)
library(stars)
source("src/near.obs.R")

tmap_options(
  basemaps = c(
    'Satelital' = leaflet::providers$Esri.WorldImagery,
    'OSM' = leaflet::providers$OpenStreetMap
  )
)
```


```{r}
demo(meuse, echo = FALSE)
hist(meuse$zinc, main="")
datos_zinc <-
  as.geodata(as.data.frame(meuse),
             coords.col = 1:2,
             data.col = 6)
```

### Kriging Ordinario 

#### Ajuste de semivariogramas

```{r}
ini.v <- c(var(log1p(datos_zinc$data)), 500)
zinc.vgm <- likfit(datos_zinc,
                   lambda = 0,
                   ini = ini.v,
                   cov.model =
                     "exponential")
zinc.vgm
```

#### Interpolación Kriging
```{r}
grilla_zinc <- meuse.grid@coords
zinc.ok <-
  krige.conv(datos_zinc,
             locations = grilla_zinc,
             krige = krige.control
             (obj.m = zinc.vgm))
```

### Interpolación Espacial Random Forest (RFSI)

#### Generación de covariables basadas en distancia y valores vecinos
```{r}
nn_datos_zinc <- near.obs(
  locations = meuse,
  observations = meuse,
  zcol = "zinc",
  n.obs = 10,
  idw = F
)

meuse_nn <- cbind(meuse[, -c(1:3, 5:13)], nn_datos_zinc)
meuse_nn

```

#### Ajuste del RF
```{r}
fitControl <- trainControl(method = "CV", number = 10)
as.formula(paste("y ~ ", paste(names(meuse_nn), collapse = "+")))

set.seed(7)
train_rfsi_zinc <- train(
  zinc ~ dist1 + dist2 + dist3 + dist4 + dist5 + dist6 + dist7 +
    dist8 + dist9 + dist10 + obs1 + obs2 + obs3 + obs4 + obs5 +
    obs6 + obs7 + obs8 + obs9 + obs10,
  data = as.data.frame(meuse_nn) ,
  method = "rf",
  trControl = fitControl,
  importance = T
  
)
train_rfsi_zinc
```

#### Importancia de variables regresoras
```{r}
importancia_zinc <-
  as.data.frame(importance(train_rfsi_zinc$finalModel))
importancia_zinc$Variable <- rownames(importancia_zinc)
head(importancia_zinc)

ggplot(data = importancia_zinc, aes(
  x = reorder(Variable, `%IncMSE`),
  y = `%IncMSE`,
  fill = `%IncMSE`
)) +
  labs(x = "Variable", title = "Incremento de MSE (%)") +
  geom_col() +
  coord_flip() +
  theme_bw() +
  theme(legend.position = "bottom")
```

#### Predicción RFSI

```{r}
grilla_nn_zinc <-
  near.obs(
    locations = meuse.grid,
    observations = meuse_nn,
    zcol = "zinc",
    n.obs = 10,
    idw = F
  )

grilla_nn_zinc <- cbind(meuse.grid, grilla_nn_zinc)

grilla_nn_zinc$RFSI <-
  predict(train_rfsi_zinc, newdata = grilla_nn_zinc)

```

#### Mapa predicción KO y RFSI

```{r}
grilla_nn_zinc$KO <- zinc.ok$predict

grilla_nn_zinc <- st_as_sf(grilla_nn_zinc)
grilla_nn_zinc_rast <-
  st_rasterize(grilla_nn_zinc, dx = 40, dy = 40)

tmap_mode('view')

breaks_custom <- pretty(c(grilla_nn_zinc_rast$KO,
                          grilla_nn_zinc_rast$RFSI),
                        n = 6)


breaks_custom <- quantile(c(grilla_nn_zinc_rast$KO,
                            grilla_nn_zinc_rast$RFSI),
                          c(0.2, 0.5, 0.8, 1),
                          na.rm = TRUE)
```

```{r}
kriging_zinc <-
  tm_basemap(
    c(
      Satelite = "Esri.WorldImagery",
      Politico = "Esri.WorldGrayCanvas",
      Topo = "Esri.WorldTopoMap"
    )
  ) +
  tm_shape(grilla_nn_zinc_rast,
           name = "Kriging") +
  tm_raster(
    col = "KO",
    title = "Zinc Kriging",
    style = "cont",
    palette = "YlOrBr",
    contrast = c(0.1, 1),
    breaks = breaks_custom
  ) +
  tm_layout(legend.format = list(
    scientific = TRUE,
    format = "f",
    digits = 0
  ))

kriging_zinc
```


```{r}
RFSI_zinc <-
  tm_basemap(
    c(
      Satelite = "Esri.WorldImagery",
      Politico = "Esri.WorldGrayCanvas",
      Topo = "Esri.WorldTopoMap"
    )
  ) +
  tm_shape(grilla_nn_zinc_rast,
           name = "RFSI") +
  tm_raster(
    col = "RFSI",
    title = "Arcilla (%) RFSI",
    style = "cont",
    palette = "YlOrBr",
    contrast = c(0.1, 1),
    breaks = breaks_custom
  ) +
  tm_layout(legend.format = list(
    scientific = TRUE,
    format = "f",
    digits = 0
  ))

RFSI_zinc

```




